import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.client.default import DefaultBotProperties
import logging

TOKEN = "YOUR_TOKEN"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher(storage=MemoryStorage())

user_data = {}
user_cooldowns = {}  # user_id: datetime

class Form(StatesGroup):
    waiting_for_id = State()
    waiting_for_type = State()
    waiting_for_pair = State()
    ready_for_signals = State()

# –ü–∞—Ä—ã
otc_pairs = [
    "EUR/USD OTC", "USD/CHF OTC", "AUD/USD OTC", "Gold OTC",
    "AUD/CAD OTC", "AUD/CHF OTC", "AUD/JPY OTC", "AUD/NZD OTC",
    "CAD/CHF OTC", "CAD/JPY OTC", "CHF/JPY OTC"
]
real_pairs = [
    "EUR/USD", "AUD/USD", "Gold", "AUD/CAD", "AUD/JPY", "CAD/JPY"
]
index_pairs = [
    "Compound Index", "Asia Composite Index", "Crypto Composite Index"
]

all_pairs = otc_pairs + real_pairs + index_pairs

timeframes = ["1 minuto"] * 7 + ["3 minutos"] * 2 + ["15 minutos"]
budget_options = ["10% del banco", "15% del banco", "20% del banco"]
directions = ["üìà Arriba", "üìâ Abajo"]

# =============== –ö–õ–ê–í–´ ===============

def get_type_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïπ Pares OTC", callback_data="type_otc")],
        [InlineKeyboardButton(text="üìà Parejas reales", callback_data="type_real")],
        [InlineKeyboardButton(text="üìä √çndices", callback_data="type_index")]
    ])

def get_pairs_keyboard(pairs):
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=p, callback_data=f"pair:{p}")] for p in pairs] +
                        [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_types")]]
    )

# =============== –õ–û–ì–ò–ö–ê ===============

@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer("üëã ¬°Hola! Por favor, env√≠ame tu ID de cuenta.")
    await state.set_state(Form.waiting_for_id)

@dp.message(Form.waiting_for_id)
async def process_id(message: Message, state: FSMContext):
    uid = message.from_user.id
    user_data[uid] = {}  # —á–∏—Å—Ç—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —é–∑–µ—Ä–∞

    await message.answer(
        "‚úÖ ID aceptado. Ahora seleccione el tipo de par de divisas:", 
        reply_markup=get_type_keyboard()
    )
    await state.set_state(Form.waiting_for_type)

@dp.callback_query(F.data == "type_otc")
async def show_otc_pairs(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("Seleccione el par de divisas OTC:", reply_markup=get_pairs_keyboard(otc_pairs))
    await state.set_state(Form.waiting_for_pair)

@dp.callback_query(F.data == "type_real")
async def show_real_pairs(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("Seleccione un par de divisas real:", reply_markup=get_pairs_keyboard(real_pairs))
    await state.set_state(Form.waiting_for_pair)

@dp.callback_query(F.data == "type_index")
async def show_index_pairs(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("Seleccionar √≠ndice:", reply_markup=get_pairs_keyboard(index_pairs))
    await state.set_state(Form.waiting_for_pair)

@dp.callback_query(F.data == "back_to_types")
async def back_to_type_selection(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("Seleccione el tipo de pares de divisas:", reply_markup=get_type_keyboard())
    await state.set_state(Form.waiting_for_type)

@dp.callback_query(F.data.startswith("pair:"))
async def select_pair(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–∫, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å

    pair = callback.data.split(":", 1)[1]
    uid = callback.from_user.id

    # –µ—Å–ª–∏ —é–∑–µ—Ä –≤—ã–±—Ä–∞–ª —Ç—É –∂–µ –ø–∞—Ä—É ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if uid in user_data and user_data[uid].get("pair") == pair:
        return  

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É
    user_data.setdefault(uid, {})
    user_data[uid]["pair"] = pair

    btn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì© RECIBIR SE√ëAL", callback_data="get_signal")],
            [InlineKeyboardButton(text="üîô Atr√°s", callback_data="back_to_types")]
        ]
    )

    await callback.message.answer(
        f"Gran pareja: {pair}\nListo para enviar se√±al. üëá",
        reply_markup=btn
    )
    await state.set_state(Form.ready_for_signals)


@dp.callback_query(F.data == "get_signal")
async def send_signal(callback: CallbackQuery):
    user_id = callback.from_user.id
    now = datetime.now()

    cooldown_until = user_cooldowns.get(user_id)
    if cooldown_until:
        remaining = (cooldown_until - now).total_seconds()
        if remaining > 0:
            minutes = int(remaining) // 60
            seconds = int(remaining) % 60
            await callback.answer(
                f"‚è≥ Espera {minutes}min {seconds}seg hasta la pr√≥xima se√±al",
                show_alert=True
            )
            return

    # –∫—É–ª–¥–∞—É–Ω 5 –º–∏–Ω
    user_cooldowns[user_id] = now + timedelta(minutes=5)

    msg = await callback.message.answer("‚è≥ Preparando se√±al...")
    await asyncio.sleep(5)
    await msg.delete()

    user = user_data.get(user_id, {})
    pair = user.get("pair", "USD/JPY OTC")
    tf = random.choice(timeframes)
    budget = random.choice(budget_options)
    direction = random.choice(directions)

    signal_text = (
        f"Periodo de tiempo: *{tf}*\n"
        f"Presupuesto: *{budget}*\n"
        f"Direcci√≥n: *{direction}*"
    )

    btn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì© RECIBIR SE√ëAL", callback_data="get_signal")],
            [InlineKeyboardButton(text="üîô Atr√°s", callback_data="back_to_types")]
        ]
    )

    await callback.message.answer(signal_text, reply_markup=btn)

# ================== –ü–õ–ê–ù–û–í–´–ï –°–ò–ì–ù–ê–õ–´ ==================

async def scheduled_signals():
    while True:
        now = datetime.utcnow() - timedelta(hours=5)
        hour = now.hour
        if 8 <= hour < 18:
            wait = 3*60*60
        elif 18 <= hour <= 23:
            wait = 30*60
        else:
            await asyncio.sleep(60)
            continue

        for uid, data in user_data.items():
            if "pair" in data:
                pair = random.choice(all_pairs)
                tf = random.choice(timeframes)
                budget = random.choice(budget_options)
                direction = random.choice(directions)

                text = (
                    f"Par: *{pair}*\n"
                    f"Periodo de tiempo: *{tf}*\n"
                    f"Presupuesto: *{budget}*\n"
                    f"Direcci√≥n: *{direction}*"
                )

                btn = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üì© RECIBIR SE√ëAL", callback_data="get_signal")]]
                )

                try:
                    await bot.send_message(uid, text, reply_markup=btn)
                except:
                    continue

        await asyncio.sleep(wait)

# ================== MAIN ==================

async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(scheduled_signals())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
